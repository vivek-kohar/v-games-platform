// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  gameStates   GameState[]
  achievements Achievement[]
  playerBank   PlayerBank?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  thumbnail   String?
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  gameStates GameState[]
}

model GameState {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  data      Json     // Store game-specific data as JSON
  score     Int      @default(0)
  level     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  gameSlug    String
  name        String
  description String?
  unlockedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameSlug, name])
}

model PlayerBank {
  id         String     @id @default(cuid())
  userId     String     @unique
  totalValue Int        @default(0)
  items      BankItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankItem {
  id          String   @id @default(cuid())
  bankId      String
  itemId      String
  itemType    String
  itemName    String
  quantity    Int
  value       Int
  rarity      String
  icon        String
  description String
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())

  bank PlayerBank @relation(fields: [bankId], references: [id], onDelete: Cascade)

  @@unique([bankId, itemId, itemType])
}
